╔══════════════════════════════════════════════════════════════════════════════╗
║                    NODEMAILER EMAIL IMPLEMENTATION GUIDE                     ║
║                          Blue Escape Backend Project                         ║
╚══════════════════════════════════════════════════════════════════════════════╝

📧 OVERVIEW
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
This guide explains how to set up and use the email functionality for your contact
inquiry system using Nodemailer.

When a user submits a contact inquiry form, the system will:
1. Save the inquiry to the database
2. Send a notification email to the admin with full inquiry details
3. Send a confirmation email to the customer

✅ IMPLEMENTATION COMPLETE
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
The following components have been created and integrated:

1. ✓ Installed nodemailer and @types/nodemailer packages
2. ✓ Created EmailService (src/modules/email/email.service.ts)
3. ✓ Created EmailModule (src/modules/email/email.module.ts)
4. ✓ Updated ContactService to send emails after saving inquiry
5. ✓ Updated ContactModule to import EmailModule
6. ✓ Added email configuration to .env.example

📝 STEP-BY-STEP SETUP GUIDE
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

STEP 1: Configure Environment Variables
────────────────────────────────────────────────────────────────────────────────
Add the following variables to your .env file (already added to .env.example):

SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_SECURE=false
SMTP_USER=your-email@gmail.com
SMTP_PASS=your-app-password
FROM_EMAIL=noreply@blueescape.com
ADMIN_EMAIL=admin@blueescape.com

STEP 2: Choose Your Email Provider
────────────────────────────────────────────────────────────────────────────────
Below are configuration examples for popular email providers:

🔵 GMAIL (Recommended for Development/Testing)
──────────────────────────────────────────────────────────────────────────
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_SECURE=false
SMTP_USER=your-gmail@gmail.com
SMTP_PASS=your-app-password          # NOT your regular password!

⚠️  IMPORTANT: For Gmail, you MUST use an "App Password", not your regular password:
1. Go to your Google Account settings
2. Enable 2-Factor Authentication (2FA)
3. Go to Security > 2-Step Verification > App passwords
4. Generate a new app password for "Mail"
5. Use this 16-character password as SMTP_PASS

🟢 SENDGRID (Recommended for Production)
──────────────────────────────────────────────────────────────────────────
SMTP_HOST=smtp.sendgrid.net
SMTP_PORT=587
SMTP_SECURE=false
SMTP_USER=apikey                     # Literally the word "apikey"
SMTP_PASS=your-sendgrid-api-key

🟣 MAILGUN
──────────────────────────────────────────────────────────────────────────
SMTP_HOST=smtp.mailgun.org
SMTP_PORT=587
SMTP_SECURE=false
SMTP_USER=postmaster@your-domain.mailgun.org
SMTP_PASS=your-mailgun-password

🟡 AWS SES (Amazon Simple Email Service)
──────────────────────────────────────────────────────────────────────────
SMTP_HOST=email-smtp.us-east-1.amazonaws.com
SMTP_PORT=587
SMTP_SECURE=false
SMTP_USER=your-aws-smtp-username
SMTP_PASS=your-aws-smtp-password

🔴 OUTLOOK/OFFICE 365
──────────────────────────────────────────────────────────────────────────
SMTP_HOST=smtp.office365.com
SMTP_PORT=587
SMTP_SECURE=false
SMTP_USER=your-email@outlook.com
SMTP_PASS=your-password

🟠 CUSTOM SMTP SERVER
──────────────────────────────────────────────────────────────────────────
SMTP_HOST=mail.yourdomain.com
SMTP_PORT=465 or 587
SMTP_SECURE=true (for port 465) or false (for port 587)
SMTP_USER=your-username
SMTP_PASS=your-password

STEP 3: Configure Email Addresses
────────────────────────────────────────────────────────────────────────────────
FROM_EMAIL: The email address that will appear as the sender
  Example: noreply@blueescape.com or support@blueescape.com

ADMIN_EMAIL: The email address where inquiry notifications will be sent
  Example: admin@blueescape.com or inquiries@blueescape.com

STEP 4: Test the Implementation
────────────────────────────────────────────────────────────────────────────────
1. Update your .env file with correct SMTP credentials
2. Restart your NestJS application
3. Submit a test inquiry through your frontend form or API
4. Check:
   ✓ Admin email receives inquiry notification
   ✓ Customer email receives confirmation message
   ✓ Inquiry is saved in database even if emails fail

🔧 HOW IT WORKS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Flow:
1. User submits contact inquiry form
2. ContactController receives the request
3. ContactService validates and saves inquiry to database
4. EmailService sends two emails ASYNCHRONOUSLY:
   a. Admin notification (with all inquiry details)
   b. Customer confirmation (thank you message)
5. API responds to user immediately (doesn't wait for emails)
6. If email fails, it's logged but doesn't break the inquiry submission

Email Templates:
- Admin Notification: Includes full inquiry details, travel dates, budget, etc.
- Customer Confirmation: Thank you message with inquiry summary

📊 EMAIL CONTENT
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Admin Notification Email Contains:
- Customer name, email, phone
- Destination
- Travel dates (start and end)
- Number of travelers
- Budget range (min-max)
- Special requests
- Inquiry type
- Newsletter subscription preference
- Inquiry ID and timestamp

Customer Confirmation Email Contains:
- Personalized greeting with customer name
- Confirmation message
- Summary of their inquiry (destination, dates, travelers, budget)
- Reference ID for future communication
- Company branding

🔒 SECURITY NOTES
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

✓ NEVER commit .env file to version control
✓ Use app-specific passwords for Gmail (not your main password)
✓ For production, use professional email service (SendGrid, AWS SES, etc.)
✓ Keep SMTP credentials secure and rotate them regularly
✓ Email sending is non-blocking - failures won't break inquiry submissions

⚙️ TROUBLESHOOTING
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Problem: Emails not sending
Solution:
- Check your .env file has correct SMTP credentials
- Verify SMTP_HOST and SMTP_PORT are correct
- For Gmail, ensure you're using App Password (not regular password)
- Check application logs for email service errors
- Test SMTP credentials with a standalone tool

Problem: Gmail "Less secure app" error
Solution:
- Gmail no longer supports "less secure apps"
- You MUST use App Passwords with 2FA enabled
- Or use Gmail OAuth2 (more complex setup)

Problem: Emails going to spam
Solution:
- Use a professional email service (SendGrid, AWS SES)
- Set up SPF, DKIM, and DMARC records for your domain
- Use a verified "from" email address
- Avoid spam trigger words in subject/body

Problem: Slow API response
Solution:
- Email sending is already asynchronous (non-blocking)
- If still slow, check your SMTP server connection speed
- Consider using a queue system (Bull, RabbitMQ) for email jobs

🚀 PRODUCTION RECOMMENDATIONS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

For production environments:

1. Use Professional Email Service:
   - SendGrid (99% deliverability, generous free tier)
   - AWS SES (cost-effective, scalable)
   - Mailgun (developer-friendly)
   - NOT Gmail (unreliable for production)

2. Implement Email Queue:
   - Use Bull Queue with Redis
   - Retry failed emails
   - Monitor email delivery status

3. Add Email Templates:
   - Use template engine (Handlebars, EJS)
   - Create reusable email templates
   - Support multiple languages

4. Monitor Email Delivery:
   - Track email open rates
   - Monitor bounce rates
   - Set up webhook notifications

5. Domain Configuration:
   - Set up SPF records
   - Configure DKIM signing
   - Implement DMARC policy
   - Use subdomain for transactional emails (mail.blueescape.com)

📚 USEFUL RESOURCES
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

- Nodemailer Documentation: https://nodemailer.com/
- Gmail App Passwords: https://support.google.com/accounts/answer/185833
- SendGrid Setup: https://sendgrid.com/docs/
- AWS SES Documentation: https://docs.aws.amazon.com/ses/
- Email Testing Tool: https://mailtrap.io/ (for development)

🎯 QUICK START CHECKLIST
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

□ Install nodemailer (already done)
□ Copy email config from .env.example to .env
□ Choose email provider (Gmail for dev, SendGrid for prod)
□ Update SMTP credentials in .env
□ For Gmail: Create App Password
□ Set FROM_EMAIL and ADMIN_EMAIL
□ Restart application
□ Test with a sample inquiry
□ Verify admin receives notification
□ Verify customer receives confirmation
□ Check logs for any errors

💡 TIPS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

✓ Start with Gmail for development and testing
✓ Use Mailtrap.io for safe email testing (catches all emails)
✓ Switch to SendGrid/AWS SES for production
✓ Always use environment variables for credentials
✓ Email sending is non-blocking, so it won't slow down API
✓ Email failures are logged but won't break inquiry submission
✓ Customize email templates in email.service.ts as needed

═══════════════════════════════════════════════════════════════════════════════

Need help? Check the logs in your application or contact your development team.

Last Updated: 2025-10-06
